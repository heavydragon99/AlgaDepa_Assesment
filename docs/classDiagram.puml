@startuml

skinparam backgroundColor #1e1e1e
skinparam classBackgroundColor #2b2b2b
skinparam classBorderColor #555555
skinparam classFontColor #ffffff
skinparam attributeFontColor #b3b3b3
skinparam operationFontColor #b3b3b3
skinparam arrowColor #ffffff
skinparam noteBackgroundColor #333333
skinparam noteFontColor #ffffff

class fileHandler {
    +std::vector<ParsedPerson> loadArtist(std::string aFilePath)
    +ParsedGrid loadGrid(std::string aFilePath)
}

class FileLoaderContext{
    + std::unique_ptr<std::ifstream> loadFile(const std::string& path)
}

interface FileLoader{
    virtual std::unique_ptr<std::ifstream> loadFile(const std::string& path) = 0
}

class URLFileLoader{
    std::unique_ptr<std::ifstream> loadFile(const std::string& url) override
}

class LocalFileLoader{
    std::unique_ptr<std::ifstream> loadFile(const std::string& url) override
}

class ArtistParserStrategy {
    + std::vector<ParsedPerson> parseFile(LoadedFile& aLoadedFile)
}

interface ArtistParser {
    + std::vector<ParsedPerson> parseFile(LoadedFile& aLoadedFile)
}

class ArtistCSVParser{
    + std::vector<ParsedPerson> parseFile(LoadedFile& aLoadedFile)
}

class GridParserStrategy{
    ParsedGrid parseFile(LoadedFile& aLoadedFile)
}

interface GridParser{
    ParsedGrid parseFile(LoadedFile& aLoadedFile)
}

class GridXMLParser{
    ParsedGrid parseFile(LoadedFile& aLoadedFile)
}

class GridTXTParser{
    ParsedGrid parseFile(LoadedFile& aLoadedFile)
}

' class artistParserStrategy {
'     +std::unique_ptr<ArtistParser> getParser(FileType fileType)
'     +std::vector<ParsedPerson> parseFile(LoadedFile& aLoadedFile)
' }

class controller{

}

class model{
    +void createLevel(std::vector<ParsedPerson> aPersons, ParsedGrid aGrid)
    +const levelData& getLevelData() const
    +void updateModel()
}

class levelData{
    +void updateLevelData()
    +void buildLevelData(std::vector<ParsedPerson> aPersons, ParsedGrid aGrid)
    +int getCols() const
    +int getRows() const
    +const std::vector<std::unique_ptr<tileNode>>& getGrid() const
    +const std::vector<std::unique_ptr<artist>>& getPeople() const
    +void update(const std::pair<int, int>& tilePos, const std::string& action)

    -std::vector<std::unique_ptr<artist>> mPeople
    -std::vector<std::unique_ptr<tileNode>> mGrid
    -int mCols
    -int mRows

    -void connectNeighbors()
    -bool checkCollisions(std::unique_ptr<artist>& aPerson)
    -bool isColliding(const std::unique_ptr<artist>& aPerson1, const std::unique_ptr<artist>& aPerson2)
}

class tileNode{
    +tileNode(std::unique_ptr<tile> aTile)
    +void addNeighbor(tileNode &aNeighbor)
    +const std::vector<std::reference_wrapper<tileNode>> &getNeighbors() const
    +tile &getTile() const
    +void setWeight(float aWeight)
    +float getWeight() const

    -std::unique_ptr<tile> mTile
    -std::vector<std::reference_wrapper<tileNode>> mNeighbors
    -float mWeight
}
class tile{
    +tile(std::unique_ptr<iTileState> initialState)
    +~tile() = default

    +void updateTile()
    +void setState(std::unique_ptr<iTileState> newState)
    +char getColor() const

    -std::unique_ptr<iTileState> state
}

interface iTileState{
    +void updateTile(tile& t)
    +char getColor() const
    +void enter()
    +void exit()
    +void forceBlue(tile& t)
}

class tileStateRed{
    -std::unique_ptr<iTileBehavior> mBehavior
}

class tileStateBlue{
    -std::unique_ptr<iTileBehavior> mBehavior
}

class tileStateGray{
    -std::unique_ptr<iTileBehavior> mBehavior
    -int mCounter
    -static const int requiredActions
}

class tileStateYellow{
    -std::unique_ptr<iTileBehavior> mBehavior
    -int mCounter
    -static const int requiredActions
}

class tileStateWhite{
    -std::unique_ptr<iTileBehavior> mBehavior
}

interface iTileBehavior {
    +void doBehavior()
}

class addArtistBehavior{
}

class infectTilesBehavior{
}

class killArtistBehavior{
}

class artist{
    +artist(Location aLocation, float aVelX, float aVelY)
    +Location update()
    +const Location& getLocation() const
    +void setLocation(Location aLocation)
    +void collidedWall()

    -Location mLocation
    -float mVelX
    -float mVelY

    ' class Location {
    '     +float mX
    '     +float mY
    ' }
}

class inputHandler{
}

class mouse{
    ' use 3rd party library to get mouse coordinates and translate to generic data
}

class keyboard{
    ' use 3rd party library to get keyboard input and translate to generic data
}

class tileFactory{
    +static std::unique_ptr<tile> createTile(char color)
    +static std::unique_ptr<iTileState> createNextState(char currentColor)
    -static TileColor charToTileColor(char color)
    -static std::unique_ptr<iTileBehavior> createBehavior(TileColor aColor)
}

class view{}

class parsedArtist{
    float x;
    float y;
    float vx;
    float vy;
}

' vector<char> parsedTile()

class parsedGrid{
    int rows
    int cols
    std::vector<gridColor> colors
    std::vector<char> grid
}

class gridColor{
    +char letter
    +int red
    +int green
    +int blue
    +int weight
}

class parsedGridColor{
    char letter;
    int red;
    int green;
    int blue;
    int weight;
}


controller <-- fileHandler
controller <-- model
controller <-- inputHandler
controller <-- view
view <-- model

' model
model <-- levelData
levelData <-- tileNode
tileNode <-- tile
tile <-- iTileState
iTileState <|.. tileStateRed
iTileState <|.. tileStateBlue
iTileState <|.. tileStateGray
iTileState <|.. tileStateYellow
iTileState <|.. tileStateWhite

tileStateRed <-- iTileBehavior
tileStateBlue <-- iTileBehavior
tileStateGray <-- iTileBehavior
tileStateYellow <-- iTileBehavior
tileStateWhite <-- iTileBehavior

iTileBehavior <|.. addArtistBehavior
iTileBehavior <|.. infectTilesBehavior
iTileBehavior <|.. killArtistBehavior

levelData <-- artist

levelData <-- tileFactory
tileFactory <-- tile
tileFactory <-- iTileState
tileFactory <-- iTileBehavior

' filehandler
fileHandler <-- FileLoaderContext
FileLoaderContext <-- FileLoader
FileLoader <|.. URLFileLoader
FileLoader <|.. LocalFileLoader

' Parser
fileHandler <-- ArtistParserStrategy
fileHandler <-- GridParserStrategy

ArtistParserStrategy <-- ArtistParser
ArtistParser <|.. ArtistCSVParser

GridParserStrategy <-- GridParser
GridParser <|.. GridTXTParser
GridParser <|.. GridXMLParser


' inputHandler
inputHandler <-- mouse
inputHandler <-- keyboard

@enduml
