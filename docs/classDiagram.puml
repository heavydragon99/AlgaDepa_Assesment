@startuml

class fileHandler {
}

class fileReader {
    +file* openOnlineFile(string url)
    +file* openLocalFile(string path)
}

class fileParser {
}

interface iArtistParser {

}

interface iTileParser {

}

class artistCSVParser{ 
}

class tileXMLParser {
}

class tileTXTParser {
}

class controller{

}

class model{
}

class levelData{
    +levelData()
    +~levelData()

    +void updateLevelData()
    +void buildLevelData(std::vector<parsedPerson> aPersons, parsedGrid aGrid)
    +int getX(int tileIndex) const
    +int getY(int tileIndex) const
    +int getTotalTiles() const
    +void getGridColor(int tileIndex, int &red, int &green, int &blue) const
    +int getPersonCount() const
    +int getPersonX(int personIndex) const
    +int getPersonY(int personIndex) const

    -std::vector<std::unique_ptr<iPerson>> mPeople
    -std::vector<std::unique_ptr<tile>> mGrid
    -int mCols
    -int mRows
    -std::vector<gridColor> mGridColor
}

class tile{
    +tile(std::unique_ptr<iTileState> initialState)
    +~tile() = default

    +void updateTile()
    +void setState(std::unique_ptr<iTileState> newState)
    +char getColor() const

    -std::unique_ptr<iTileState> state
}

interface iTileState{
    +void updateTile(tile* t)
    +char getColor() const
    +void enter(tile* t)
    +void exit(tile* t)
}

class tileStateRed{
}

class tileStateBlue{
}

class tileStateGray{
}

class tileStateYellow{
}

class tileStateWhite{
}

interface iPerson{
    +virtual void updatePerson()

    #float mX
    #float mY
    #float mVelX
    #float mVelY
}

class visitor{
    +void updatePerson() override
}

class artist{
    +void updatePerson() override
}

class inputHandler{
}

class mouse{
    ' use 3rd party library to get mouse coordinates and translate to generic data
}

class keyboard{
    ' use 3rd party library to get keyboard input and translate to generic data
}

class xboxController{
    ' use 3rd party library to get xbox controller input and translate to generic data
}

class tileFactory{
    +static std::unique_ptr<tile> createTile(char color)
    -static tileColor charToTileColor(char color)
}

class personFactory{
    +static std::unique_ptr<iPerson> createPerson(personType type, float x, float y, float velX, float velY)
}

class view{}

struct parsedArtist{
    +float x
    +float y
    +float vx
    +float vy
}

' vector<char> parsedTile()

struct parsedGrid{
    +int rows
    +int cols
    +std::vector<gridColor> colors
    +std::vector<char> grid
}

struct gridColor{
    +char letter
    +int red
    +int green
    +int blue
    +int weight
}


controller <-- fileHandler
controller <-- model
controller <-- inputHandler
controller <-- view
view <-- model

' model
model <-- levelData
levelData <-- tile
tile <-- iTileState
iTileState <|.. tileStateRed
iTileState <|.. tileStateBlue
iTileState <|.. tileStateGray
iTileState <|.. tileStateYellow
iTileState <|.. tileStateWhite

levelData <-- iPerson
iPerson <-- visitor
iPerson <-- artist

levelData <-- tileFactory
levelData <-- personFactory

' filehandler
fileHandler <-- fileReader

' Parser
fileHandler <-- fileParser
fileParser <-- iArtistParser
fileParser <-- iTileParser

iArtistParser <|.. artistCSVParser
iTileParser <|.. tileTXTParser
iTileParser <|.. tileXMLParser

' inputHandler
inputHandler <-- mouse
inputHandler <-- keyboard
inputHandler <-- xboxController
@enduml