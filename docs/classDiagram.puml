@startuml

class fileHandler {
}

class fileReader {
    file* openOnlineFile(string url);
    file* openLocalFile(string path);
}

class fileParser {
}

interface iArtistParser {

}

interface iPaintingParser {

}


class artistCSVParser{ 
}

class paintingXMLParser {
}

class paintingTXTParser {
}

class controller{

}

class model{
    void updatemodel();
}

class levelData{
    void updateLevelData();
    void buildLevelData();

    vector<artist> mArtist;
    vector<painting> mPainting;
    int mCols;
    int mRows;
    gridColor mGridColor[];
}

class painting{
    void updatePainting();

    iColor* mColor;
}

interface iColor{
    virtual void doSomething();
}

class redColor{
    void doSomething() override;
}

class blueColor{
    void doSomething() override;
}

class greenColor{
    void doSomething() override;
}

class yellowColor{
    void doSomething() override;
}

class whiteColor{
    void doSomething() override;
}

interface iPerson{
    virutal void updatePerson();

    float mX;
    float mY;
    float mVelX
    float mVelY;
}

class visitor{
    void updateVisitor() override;
}

class artist{
    void updateArtist() override;
}

class inputHandler{
}

class mouse{
    ' use 3rd party library to get mouse coordinates and translate to generic data
}

class keyboard{
    ' use 3rd party library to get keyboard input and translate to generic data
}

class xboxController{
    ' use 3rd party library to get xbox controller input and translate to generic data
}

class levelDataFactory{}

class paintingFactory{}

class personFactory{}

class view{}

struct parsedArtist{
    float x;
    float y;
    float vx;
    float vy;
}

' vector<char> parsedPainting()

struct parsedGrid{
    int rows;
    int cols;
    vector<gridColor> colors;

}

struct gridColor{
    char letter;
    int red;
    int green;
    int blue;
    int weight;
}


controller <-- fileHandler
controller <-- model
controller <-- inputHandler
controller <-- view
view <-- model

' model
model <-- levelData
levelData <-- painting
painting <-- iColor
iColor <|.. redColor
iColor <|.. blueColor
iColor <|.. greenColor
iColor <|.. yellowColor
iColor <|.. whiteColor

levelData <-- iPerson
iPerson <-- visitor
iPerson <-- artist

levelData <-- levelDataFactory

levelDataFactory <-- paintingFactory
levelDataFactory <-- personFactory

' filehandler
fileHandler <-- fileReader

' Parser
fileHandler <-- fileParser
fileParser <-- iArtistParser
fileParser <-- iPaintingParser

iArtistParser <|.. artistCSVParser
iPaintingParser <|.. paintingTXTParser
iPaintingParser <|.. paintingXMLParser

' inputHandler
inputHandler <-- mouse
inputHandler <-- keyboard
inputHandler <-- xboxController
@enduml