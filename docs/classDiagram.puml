@startuml classDiagram

' skinparam backgroundColor #1e1e1e
' skinparam classBackgroundColor #2b2b2b
' skinparam classBorderColor #555555
' skinparam classFontColor #ffffff
' skinparam attributeFontColor #b3b3b3
' skinparam operationFontColor #b3b3b3
' skinparam arrowColor #ffffff
' skinparam noteBackgroundColor #333333
' skinparam noteFontColor #ffffff
skinparam groupInheritance 3

class FileHandler {
    +std::vector<ParsedPerson> loadArtist(std::string aFilePath)
    +ParsedGrid loadGrid(std::string aFilePath)
}

class FileLoaderContext{
    + std::unique_ptr<std::ifstream> loadFile(const std::string& path)
}

interface FileLoader{
    virtual std::unique_ptr<std::ifstream> loadFile(const std::string& path) = 0
}

class URLFileLoader{
    std::unique_ptr<std::ifstream> loadFile(const std::string& url) override
}

class LocalFileLoader{
    std::unique_ptr<std::ifstream> loadFile(const std::string& url) override
}

class ArtistParserStrategy {
    + std::vector<ParsedPerson> parseFile(LoadedFile& aLoadedFile)
}

interface ArtistParser {
    + std::vector<ParsedPerson> parseFile(LoadedFile& aLoadedFile)
}

class ArtistCSVParser{
    + std::vector<ParsedPerson> parseFile(LoadedFile& aLoadedFile)
}

class GridParserStrategy{
    ParsedGrid parseFile(LoadedFile& aLoadedFile)
}

interface GridParser{
    ParsedGrid parseFile(LoadedFile& aLoadedFile)
}

class GridXMLParser{
    ParsedGrid parseFile(LoadedFile& aLoadedFile)
}

class GridTXTParser{
    ParsedGrid parseFile(LoadedFile& aLoadedFile)
}

' class artistParserStrategy {
    '     +std::unique_ptr<ArtistParser> getParser(FileType fileType)
    '     +std::vector<ParsedPerson> parseFile(LoadedFile& aLoadedFile)
    '
    '
' }

class controller{

}

class Model{
    +void createLevel(std::vector<ParsedPerson> aPersons, ParsedGrid aGrid)
    +const LevelData& getLevelData() const
    +void updateModel()
    +void usePreviousMemento();
    +void useNextMemento();

    -Memento saveToMemento() const;
    -void restoreFromMemento(Memento&& memento);
}

class LevelData{
    +void updateLevelData()
    +void buildLevelData(std::vector<ParsedPerson> aPersons, ParsedGrid aGrid)
    +int getCols() const
    +int getRows() const
    +const std::vector<std::unique_ptr<TileNode>>& getGrid() const
    +const std::vector<std::unique_ptr<Artist>>& getPeople() const
    +void update(const std::pair<int, int>& tilePos, const std::string& action)

    -std::vector<std::unique_ptr<Artist>> mPeople
    -std::vector<std::unique_ptr<TileNode>> mGrid
    -int mCols
    -int mRows

    -void connectNeighbors()
    -bool checkCollisions(std::unique_ptr<Artist>& aPerson)
    -bool isColliding(const std::unique_ptr<Artist>& aPerson1, const std::unique_ptr<Artist>& aPerson2)
}

class TileNode{
    +TileNode(std::unique_ptr<Tile> aTile)
    +void addNeighbor(TileNode &aNeighbor)
    +const std::vector<std::reference_wrapper<TileNode>> &getNeighbors() const
    +Tile &getTile() const
    +void setWeight(float aWeight)
    +float getWeight() const

    -std::unique_ptr<Tile> mTile
    -std::vector<std::reference_wrapper<TileNode>> mNeighbors
    -float mWeight
}

class Tile{
    +Tile(std::unique_ptr<ITileState> initialState)
    +~Tile() = default

    +void updateTile()
    +void setState(std::unique_ptr<ITileState> newState)
    +char getColor() const

    -std::unique_ptr<ITileState> state
}

interface ITileState{
    +void updateTile(Tile& t)
    +char getColor() const
    +void enter()
    +void exit()
    +void forceBlue(Tile& t)
}

class TileStateRed{
    -std::unique_ptr<ITileBehavior> mBehavior
}

class TileStateBlue{
    -std::unique_ptr<ITileBehavior> mBehavior
}

class TileStateGray{
    -std::unique_ptr<ITileBehavior> mBehavior
    -int mCounter
    -static const int requiredActions
}

class TileStateYellow{
    -std::unique_ptr<ITileBehavior> mBehavior
    -int mCounter
    -static const int requiredActions
}

class TileStateWhite{
    -std::unique_ptr<ITileBehavior> mBehavior
}

interface ITileBehavior {
    +void doBehavior()
}

class AddArtistBehavior{
}

class infectTilesBehavior{
}

class killArtistBehavior{
}

class Artist{
    +Artist(Location aLocation, float aVelX, float aVelY)
    +Location update()
    +const Location& getLocation() const
    +void setLocation(Location aLocation)
    +void collidedWall()

    -Location mLocation
    -float mVelX
    -float mVelY

    ' class Location {
        '     +float mX
        '     +float mY
        '
    ' }
}

class inputHandler{
}

class mouse{
    ' use 3rd party library to get mouse coordinates and translate to generic data
}

class keyboard{
    ' use 3rd party library to get keyboard input and translate to generic data
}

class tileFactory{
    +static std::unique_ptr<Tile> createTile(char color)
    +static std::unique_ptr<ITileState> createNextState(char currentColor)
    -static TileColor charToTileColor(char color)
    -static std::unique_ptr<ITileBehavior> createBehavior(TileColor aColor)
}

class view{}

class parsedArtist{
    float x;
    float y;
    float vx;
    float vy;
}

' vector<char> parsedTile()

class parsedGrid{
    int rows
    int cols
    std::vector<gridColor> colors
    std::vector<char> grid
}

class gridColor{
    +char letter
    +int red
    +int green
    +int blue
    +int weight
}

class parsedGridColor{
    char letter;
    int red;
    int green;
    int blue;
    int weight;
}

class PathFinder{
    +bool findPath(const LevelData& aLevelData, const std::pair<int, int>& aStart, const std::pair<int, int>& aEnd)
    +void setAlgorithm(Algorithms aAlgorithm)

    -void reset()

    -std::vector<std::pair<int, int>> mPath
    -std::vector<std::pair<int, int>> mVisited

}

enum Algorithms{
    Dijkstra,
    Breathfirst
}

class Memento {
    +Memento(std::unique_ptr<LevelData> state)
    +std::unique_ptr<LevelData> getState()

    -std::unique_ptr<LevelData> mState
}

class MementoManager {
    +MementoManager()
    +void addMemento(Memento memento)
    +Memento getMemento(int index)
    +Memento getPreviousMemento()
    +Memento getNextMemento()

    -std::vector<Memento> mMementos
    -int mCurrentIndex
}


controller <-- FileHandler
controller <-- Model
controller <-- inputHandler
controller <-- view
view <-- Model

' Model
Model *-- "1" LevelData
Model <-- PathFinder
PathFinder -- LevelData

LevelData <-- TileNode
TileNode <-- Tile
Tile <-- ITileState
ITileState <|.. TileStateRed
ITileState <|.. TileStateBlue
ITileState <|.. TileStateGray
ITileState <|.. TileStateYellow
ITileState <|.. TileStateWhite
ITileState <-- tileFactory

TileStateRed <-- ITileBehavior
TileStateBlue <-- ITileBehavior
TileStateGray <-- ITileBehavior
TileStateYellow <-- ITileBehavior
TileStateWhite <-- ITileBehavior

ITileBehavior <|.. AddArtistBehavior
ITileBehavior <|.. infectTilesBehavior
ITileBehavior <|.. killArtistBehavior
ITileBehavior -- LevelData

LevelData <-- Artist

Model *-- "1" MementoManager
LevelData "1" --* Memento
MementoManager *-- "0..*" Memento

LevelData <-- tileFactory
tileFactory <-- Tile
tileFactory <-- ITileState
tileFactory <-- ITileBehavior

' FileHandler
FileHandler <-- FileLoaderContext
FileLoaderContext <-- FileLoader
FileLoader <|.. URLFileLoader
FileLoader <|.. LocalFileLoader

' Parser
FileHandler <-- ArtistParserStrategy
FileHandler <-- GridParserStrategy

ArtistParserStrategy <-- ArtistParser
ArtistParser <|.. ArtistCSVParser

GridParserStrategy <-- GridParser
GridParser <|.. GridTXTParser
GridParser <|.. GridXMLParser


' inputHandler
inputHandler <-- mouse
inputHandler <-- keyboard

@enduml
