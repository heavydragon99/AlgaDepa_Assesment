@startuml

class fileHandler {
}

class fileReader {
    file* openOnlineFile(string url);
    file* openLocalFile(string path);
}

class fileParser {
}

interface iArtistParser {

}

interface iTileParser {

}

class artistCSVParser{ 
}

class tileXMLParser {
}

class tileTXTParser {
}

class controller{

}

class model{
}

class levelData{
    void updateLevelData();
    void buildLevelData(std::vector<parsedPerson> aPersons, parsedGrid aGrid);

    std::vector<std::unique_ptr<iPerson>> mPeople;
    std::vector<std::unique_ptr<tile>> mGrid;
    int mCols;
    int mRows;
    std::vector<gridColor> mGridColor;
}

class tile{
    void updateTile();

    iTileState* mColor;
}

interface iTileState{
    virtual void doSomething();
}

class tileStateRed{
    void doSomething() override;
}

class tileStateBlue{
    void doSomething() override;
}

class tileStateGray{
    void doSomething() override;
}

class tileStateYellow{
    void doSomething() override;
}

class tileStateWhite{
    void doSomething() override;
}

interface iPerson{
    virtual void updatePerson();

    float mX;
    float mY;
    float mVelX;
    float mVelY;
}

class visitor{
    void updatePerson() override;
}

class artist{
    void updatePerson() override;
}

class inputHandler{
}

class mouse{
    ' use 3rd party library to get mouse coordinates and translate to generic data
}

class keyboard{
    ' use 3rd party library to get keyboard input and translate to generic data
}

class xboxController{
    ' use 3rd party library to get xbox controller input and translate to generic data
}

class tileFactory{}

class personFactory{
}

class view{}

struct parsedArtist{
    float x;
    float y;
    float vx;
    float vy;
}

' vector<char> parsedTile()

struct parsedGrid{
    int rows;
    int cols;
    std::vector<gridColor> colors;
    std::vector<char> grid;
}

struct gridColor{
    char letter;
    int red;
    int green;
    int blue;
    int weight;
}


controller <-- fileHandler
controller <-- model
controller <-- inputHandler
controller <-- view
view <-- model

' model
model <-- levelData
levelData <-- tile
tile <-- iTileState
iTileState <|.. tileStateRed
iTileState <|.. tileStateBlue
iTileState <|.. tileStateGray
iTileState <|.. tileStateYellow
iTileState <|.. tileStateWhite

levelData <-- iPerson
iPerson <-- visitor
iPerson <-- artist

levelData <-- tileFactory
levelData <-- personFactory

' filehandler
fileHandler <-- fileReader

' Parser
fileHandler <-- fileParser
fileParser <-- iArtistParser
fileParser <-- iTileParser

iArtistParser <|.. artistCSVParser
iTileParser <|.. tileTXTParser
iTileParser <|.. tileXMLParser

' inputHandler
inputHandler <-- mouse
inputHandler <-- keyboard
inputHandler <-- xboxController
@enduml