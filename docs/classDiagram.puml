@startuml

class fileHandler {
    +std::vector<ParsedPerson> loadArtist(std::string aFilePath)
    +ParsedGrid loadGrid(std::string aFilePath)
}

class FileLoaderContext{
    + std::unique_ptr<std::ifstream> loadFile(const std::string& path)
}

interface FileLoader{
    virtual std::unique_ptr<std::ifstream> loadFile(const std::string& path) = 0
}

class URLFileLoader{
    std::unique_ptr<std::ifstream> loadFile(const std::string& url) override
}

class LocalFileLoader{
    std::unique_ptr<std::ifstream> loadFile(const std::string& url) override
}

class fileParser {
}

class ArtistParserStrategy {
    + std::vector<ParsedPerson> parseFile(LoadedFile& aLoadedFile)
}

interface ArtistParser {
    + std::vector<ParsedPerson> parseFile(LoadedFile& aLoadedFile)
}

class ArtistCSVParser{
    + std::vector<ParsedPerson> parseFile(LoadedFile& aLoadedFile)
}

class GridParserStrategy{
    ParsedGrid parseFile(LoadedFile& aLoadedFile)
}

interface GridParser{
    ParsedGrid parseFile(LoadedFile& aLoadedFile)
}

class GridXMLParser{
    ParsedGrid parseFile(LoadedFile& aLoadedFile)
}

class GridTXTParser{
    ParsedGrid parseFile(LoadedFile& aLoadedFile)
}

class controller{

}

class model{
}

class levelData{
    +levelData()
    +~levelData()

    +void updateLevelData()
    +void buildLevelData(std::vector<parsedPerson> aPersons, parsedGrid aGrid)
    +int getX(int tileIndex) const
    +int getY(int tileIndex) const
    +int getTotalTiles() const
    +void getGridColor(int tileIndex, int &red, int &green, int &blue) const
    +int getPersonCount() const
    +int getPersonX(int personIndex) const
    +int getPersonY(int personIndex) const

    -std::vector<std::unique_ptr<iPerson>> mPeople
    -std::vector<std::unique_ptr<tile>> mGrid
    -int mCols
    -int mRows
    -std::vector<gridColor> mGridColor
}

class tile{
    +tile(std::unique_ptr<iTileState> initialState)
    +~tile() = default

    +void updateTile()
    +void setState(std::unique_ptr<iTileState> newState)
    +char getColor() const

    -std::unique_ptr<iTileState> state
}

interface iTileState{
    +void updateTile(tile* t)
    +char getColor() const
    +void enter(tile* t)
    +void exit(tile* t)
}

class tileStateRed{
}

class tileStateBlue{
}

class tileStateGray{
}

class tileStateYellow{
}

class tileStateWhite{
}

interface iPerson{
    +virtual void updatePerson()

    #float mX
    #float mY
    #float mVelX
    #float mVelY
}

class visitor{
    +void updatePerson() override
}

class artist{
    +void updatePerson() override
}

class inputHandler{
}

class mouse{
    ' use 3rd party library to get mouse coordinates and translate to generic data
}

class keyboard{
    ' use 3rd party library to get keyboard input and translate to generic data
}

class xboxController{
    ' use 3rd party library to get xbox controller input and translate to generic data
}

class tileFactory{
    +static std::unique_ptr<tile> createTile(char color)
    -static tileColor charToTileColor(char color)
}

class personFactory{
    +static std::unique_ptr<iPerson> createPerson(personType type, float x, float y, float velX, float velY)
}

class view{}

class parsedArtist{
    float x;
    float y;
    float vx;
    float vy;
}

' vector<char> parsedTile()

class parsedGrid{
    int rows
    int cols
    std::vector<gridColor> colors
    std::vector<char> grid
}

class gridColor{
    +char letter
    +int red
    +int green
    +int blue
    +int weight
}

class parsedGridColor{
    char letter;
    int red;
    int green;
    int blue;
    int weight;
}


controller <-- fileHandler
controller <-- model
controller <-- inputHandler
controller <-- view
view <-- model

' model
model <-- levelData
levelData <-- tile
tile <-- iTileState
iTileState <|.. tileStateRed
iTileState <|.. tileStateBlue
iTileState <|.. tileStateGray
iTileState <|.. tileStateYellow
iTileState <|.. tileStateWhite

levelData <-- iPerson
iPerson <-- visitor
iPerson <-- artist

levelData <-- tileFactory
levelData <-- personFactory

' filehandler
fileHandler <-- FileLoaderContext
FileLoaderContext <-- FileLoader
FileLoader <|.. URLFileLoader
FileLoader <|.. LocalFileLoader

' Parser
fileHandler <-- fileParser
fileParser <-- ArtistParserStrategy
fileParser <-- GridParserStrategy

ArtistParserStrategy <-- ArtistParser
ArtistParser <|.. ArtistCSVParser

GridParserStrategy <-- GridParser
GridParser <|.. GridTXTParser
GridParser <|.. GridXMLParser


' inputHandler
inputHandler <-- mouse
inputHandler <-- keyboard
inputHandler <-- xboxController
@enduml
