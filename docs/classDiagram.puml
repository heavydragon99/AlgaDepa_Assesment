@startuml classDiagram

' skinparam backgroundColor #1e1e1e
' skinparam classBackgroundColor #2b2b2b
' skinparam classBorderColor #555555
' skinparam classFontColor #ffffff
' skinparam attributeFontColor #b3b3b3
' skinparam operationFontColor #b3b3b3
' skinparam arrowColor #ffffff
' skinparam noteBackgroundColor #333333
' skinparam noteFontColor #ffffff
skinparam groupInheritance 3

class FileHandler {
    +std::vector<ParsedPerson> loadArtist(std::string aFilePath)
    +ParsedGrid loadGrid(std::string aFilePath)
    -FileType getFileType(std::string aFilePath)
}

class FileLoader{
    + std::unique_ptr<std::ifstream> loadFile(const std::string& path)
    - bool isURL(const std::string& path);
}

interface IFileLoader{
    virtual std::unique_ptr<std::ifstream> loadFile(const std::string& path) = 0
}

class URLFileLoader{
    std::unique_ptr<std::ifstream> loadFile(const std::string& url) override
}

class LocalFileLoader{
    std::unique_ptr<std::ifstream> loadFile(const std::string& url) override
}

class ArtistParser {
    + std::unique_ptr<IArtistParser> getParser(FileType fileType)
    + std::vector<ParsedPerson> parseFile(LoadedFile& aLoadedFile)
}

interface IArtistParser {
    + std::vector<ParsedPerson> parseFile(LoadedFile& aLoadedFile)
}

class ArtistCSVParser{
    + std::vector<ParsedPerson> parseFile(LoadedFile& aLoadedFile)
}

class GridParser{
    ParsedGrid parseFile(LoadedFile& aLoadedFile)
}

interface IGridParser{
    ParsedGrid parseFile(LoadedFile& aLoadedFile)
}

class GridXMLParser{
    ParsedGrid parseFile(LoadedFile& aLoadedFile)
}

class GridTXTParser{
    ParsedGrid parseFile(LoadedFile& aLoadedFile)
}

' class ArtistParser {
    '     +std::unique_ptr<IArtistParser> getParser(FileType fileType)
    '     +std::vector<ParsedPerson> parseFile(LoadedFile& aLoadedFile)
    '
    '
' }

class Controller {
    +Controller()
    +void initialize()
    +void run()
    -void setCommands()
    -void handleMouseInput()
    -void checkInputs()
    -void handleUserInput()
    -void rearrangeTile()
    -void loadPreviousMemento()
    -void loadNextMemento()
    -void speedUp()
    -void slowDown()
    -void runPathFinding()
    -void createLevel()

    -std::unique_ptr<Model> mModel
    -std::unique_ptr<View> mView
    -std::vector<ParsedPerson> mPersons
    -ParsedGrid mGrid
    -std::unique_ptr<CollisionHandler> mCollisionHandler
    -std::unique_ptr<InputHandler> mInputHandler
    -const int mFPSView
    -int mCurrentFPSLogic
    -std::optional<std::pair<int, int>> mPathfindingStart
    -std::optional<std::pair<int, int>> mPathfindingEnd
}

class Model{
    +void createLevel(std::vector<ParsedPerson> aPersons, ParsedGrid aGrid)
    +const LevelData& getLevelData() const
    +void updateModel()
    +void usePreviousMemento();
    +void useNextMemento();

    -Memento saveToMemento() const;
    -void restoreFromMemento(Memento&& memento);
}

class LevelData{
    +void updateLevelData()
    +void buildLevelData(std::vector<ParsedPerson> aPersons, ParsedGrid aGrid)
    +int getCols() const
    +int getRows() const
    +const std::vector<std::unique_ptr<TileNode>>& getGrid() const
    +const std::vector<std::unique_ptr<Artist>>& getPeople() const
    +void update(const std::pair<int, int>& tilePos, const std::string& action)

    -std::vector<std::unique_ptr<Artist>> mPeople
    -std::vector<std::unique_ptr<TileNode>> mGrid
    -int mCols
    -int mRows

    -void connectNeighbors()
    -bool checkCollisions(std::unique_ptr<Artist>& aPerson)
    -bool isColliding(const std::unique_ptr<Artist>& aPerson1, const std::unique_ptr<Artist>& aPerson2)
}

class TileNode{
    +TileNode(std::unique_ptr<Tile> aTile, int aX, int aY)
    +TileNode(const TileNode& other)
    +TileNode& operator=(const TileNode& other)

    -std::unique_ptr<Tile> mTile
    -std::vector<std::reference_wrapper<TileNode>> mNeighbors
    -int mWeight
    -int mX
    -int mY
    -bool mIsPath
    -bool mIsVisited
}

class Tile{
    +Tile(std::unique_ptr<ITileState> initialState)
    +~Tile() = default
    +Tile(const Tile& other)
    +Tile& operator=(const Tile& other)
    +void updateTile()
    +void forceBlue()
    +void setState(std::unique_ptr<ITileState> newState)
    +char getColor() const
    +void resetUpdate()

    -std::unique_ptr<ITileState> mState
    -bool mUpdated = true
}

interface ITileState{
    +void updateTile(Tile& t)
    +char getColor() const
    +void enter()
    +void exit()
    +void forceBlue(Tile& t)
}

class TileStateRed{
    -std::unique_ptr<ITileBehavior> mBehavior
}

class TileStateBlue{
    -std::unique_ptr<ITileBehavior> mBehavior
}

class TileStateGray{
    -std::unique_ptr<ITileBehavior> mBehavior
    -int mCounter
    -static const int requiredActions
}

class TileStateYellow{
    -std::unique_ptr<ITileBehavior> mBehavior
    -int mCounter
    -static const int requiredActions
}

class TileStateWhite{
    -std::unique_ptr<ITileBehavior> mBehavior
}

interface ITileBehavior {
    +void doBehavior()
}

class AddArtistBehavior{
}

class infectTilesBehavior{
}

class killArtistBehavior{
}

class Artist {
    +Artist(Location aLocation, float aVelX, float aVelY)
    +Location update()
    +Location& getLocation()
    +void setLocation(Location aLocation)
    +void collidedWall(bool aTop)
    +void collidedOtherArtist()
    +bool getRed()
    +void triggerRed()
    +void resetRed()

    -Location mLocation
    -float mVelX
    -float mVelY
    -bool mIsRed

    ' class Location {
        '     +float mX
        '     +float mY
        '
    ' }
}

class inputHandler{
}

class mouse{
    ' use 3rd party library to get mouse coordinates and translate to generic data
}

class keyboard{
    ' use 3rd party library to get keyboard input and translate to generic data
}

class TileFactory{
    + {static} std::unique_ptr<Tile> createTile(char color)
    + {static} std::unique_ptr<ITileState> createNextState(char currentColor)
    + {static} std::unique_ptr<ITileState> createBlueState();
    + {static} void setLevelData(LevelData* aLevelData);
    - {static} TileColor charToTileColor(char color)
    - {static} std::unique_ptr<ITileBehavior> createBehavior(TileColor aColor)
}

class View {
    +View(Model& aModel)
    +~View()
    +void render()
    +void handleEvents(bool& quit)
    +void setGridColor(std::vector<GridColor> aGridColor)
    +int getTileSize() const
    +void setQuadtreeBoundaries(std::vector<Quadtree::Boundary> aBoundaries)

    -void renderQuadtree()
    -void renderTile(int tileWidth, int tileHeight)
    -void renderPeople(int tileWidth, int tileHeight)
    -void getTileColor(char aColor, int& aRed, int& aGreen, int& aBlue)

    -std::vector<Quadtree::Boundary> mBoundaries
    -Model& mModel
    -std::vector<GridColor> mGridColor
    -Renderer mRenderer
    -int mTileSize
}

class parsedArtist{
    float x;
    float y;
    float vx;
    float vy;
}

' vector<char> parsedTile()

class parsedGrid{
    int rows
    int cols
    std::vector<gridColor> colors
    std::vector<char> grid
}

class gridColor{
    +char letter
    +int red
    +int green
    +int blue
    +int weight
}

class parsedGridColor{
    char letter;
    int red;
    int green;
    int blue;
    int weight;
}

class PathFinder{
    +bool findPath(const LevelData& aLevelData, const std::pair<int, int>& aStart, const std::pair<int, int>& aEnd)
    +void setAlgorithm(Algorithms aAlgorithm)

    -void reset()

    -std::vector<std::pair<int, int>> mPath
    -std::vector<std::pair<int, int>> mVisited

}

enum Algorithms{
    Dijkstra,
    Breathfirst
}

class Memento {
    + Memento() = default;
    + Memento(LevelData& aLevelData);
    + ParsedGrid getGrid();
    + std::vector<Artist>& getPeople();

    - ParsedGrid mGrid; 
    - std::vector<Artist> mPeople;
}

class MementoManager {
    +MementoManager()
    +void addMemento(Memento memento)
    +Memento getMemento(int index)
    +Memento getPreviousMemento()
    +Memento getNextMemento()

    -std::vector<Memento> mMementos
    -int mCurrentIndex
    -int mStartIndex
    -int mSize
    -int mValidSize
}

class Configuration {
    +static Configuration& getInstance()
    +void setConfig(const std::string& key, bool value)
    +bool getConfig(const std::string& key) const

    -Configuration()
    -std::unordered_map<std::string, bool> configs
}


Controller <-- FileHandler
Controller <-- Model
Controller <-- inputHandler
Controller <-- View
View <-- Model

' Model
Model *-- "1" LevelData
Model <-- PathFinder
PathFinder -- LevelData

LevelData <-- TileNode
TileNode <-- Tile
Tile <-- ITileState
ITileState <|.. TileStateRed
ITileState <|.. TileStateBlue
ITileState <|.. TileStateGray
ITileState <|.. TileStateYellow
ITileState <|.. TileStateWhite
ITileState <-- TileFactory

TileStateRed <-- ITileBehavior
TileStateBlue <-- ITileBehavior
TileStateGray <-- ITileBehavior
TileStateYellow <-- ITileBehavior
TileStateWhite <-- ITileBehavior

ITileBehavior <|.. AddArtistBehavior
ITileBehavior <|.. infectTilesBehavior
ITileBehavior <|.. killArtistBehavior
ITileBehavior -- LevelData

LevelData <-- Artist

Model *-- "1" MementoManager
LevelData "1" --* Memento
MementoManager *-- "0..*" Memento

LevelData <-- TileFactory
TileFactory <-- Tile
TileFactory <-- ITileState
TileFactory <-- ITileBehavior

' FileHandler
FileHandler <-- FileLoader
FileLoader <-- IFileLoader
IFileLoader <|.. URLFileLoader
IFileLoader <|.. LocalFileLoader

' Parser
FileHandler <-- ArtistParser
FileHandler <-- GridParser

ArtistParser <-- IArtistParser
IArtistParser <|.. ArtistCSVParser

GridParser <-- IGridParser
IGridParser <|.. GridTXTParser
IGridParser <|.. GridXMLParser


' inputHandler
inputHandler <-- mouse
inputHandler <-- keyboard

@enduml
